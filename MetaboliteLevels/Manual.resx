<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Adducts" xml:space="preserve">
    <value>FILEFORMAT

Specify information on LC-MS adducts.

OPTIONAL: If not specified then no automatic identifications will be performed.

EXPECTS: CSVFILE

{}
Text. Row names. Ignored. Mandatory.

{ADDUCTFILE_NAME_HEADER}
Text. The name of the adduct. Optional.

{ADDUCTFILE_CHARGE_HEADER}
Numeric. The charge of the adduct (-1 = negative mode LC-MS, 1 = positive mode LS-MS). Required.

{ADDUCTFILE_MASS_DIFFERENCE_HEADER}
The mass of the adduct. Required.

{META}
Any additional data the user wishes to provide, unused but will be available for viewing in the software.</value>
  </data>
  <data name="AlternativeValues" xml:space="preserve">
    <value>FILEFORMAT

Specify an alternative dataset.

This may be accessed later for quick viewing, for instance to view unprocessed or raw data.
Only peaks also occurring in the standard dataset are read, these may appear in any order.

OPTIONAL: If not specified no alternative data will be available.

EXPECTS: CSVFILE

{}
Text. Observation names. Must be unique. Mandatory

{=Text. Peak names. Must be unique. Mandatory.}
One row per observation.
One column per peak.
</value>
  </data>
  <data name="ClusteringRScriptExample" xml:space="preserve">
    <value>kmeans(v, 3)$cluster</value>
  </data>
  <data name="ClusterRScript" xml:space="preserve">
    <value>Clusters based on R script.
The script should use the variable "s" (the distance matrix) and return cluster IDs (integer numeric vector).</value>
  </data>
  <data name="Compounds" xml:space="preserve">
    <value>FILEFORMAT

Specifies the compounds available for identification. 

OPTIONAL: If not specified then no automatic identifications will be performed. Note that you can use "identifications" field to specify known identifications.

EXPECTS: One or more compound libraries. Either a PathwayTools database folder OR a CSV file.
A list of available libraries will be displayed if the library folder has been configured, otherwise the source must be specified manually.

DATABASE LAYOUT: PathwayTools database folder.
CSV FILE LAYOUT: Click the button below for specific details.

{=Compound file fomat}

{}
Text. Column names. Ignored. Mandatory.

{COMPOUNDFILE_NAME_HEADER}
Text. The name of the compound. Optional.

{COMPOUNDFILE_FRAME_ID_HEADER}
Text. A unique ID for the compound. Optional. Required for automatic or manual annotations.

{COMPOUNDFILE_MASS_HEADER}
Numeric. The mass of the compound. Optional. Required for automatic annotations.

{COMPOUNDFILE_PATHWAYS_HEADER}
Text. The "id"s of the pathways the compound is implicated in. Comma delimited. NOTE: CSV files use commas as their internal delimiter, enclosed this list in quotes to avoid confusion. Required for pathway analysis.

{META}
Any additional data the user wishes to provide, unused but will be available for viewing in the software.

{=Pathway file fomat}

{}
Text. Column names. Ignored. Mandatory.
    
{PATHWAYFILE_FRAME_ID_HEADER}
Text. The unique ID of the pathway. Mandatory.

{PATHWAYFILE_NAME_HEADER}
Text. The name of the pathway. Optional.

{META}
Any additional data the user wishes to provide, unused but will be available for viewing in the software.</value>
  </data>
  <data name="ConditionNames" xml:space="preserve">
    <value>FILEFORMAT

Names of the experimental conditions.

OPTIONAL: If not specified conditions will be referred to by their index.

EXPECTS: CSVFILE

{}
Text. Row names. Ignored. Mandatory.

{CONDITIONFILE_ID_HEADER}
Text. The ID corresponding to the "type" column of the observation info file.

{CONDITIONFILE_NAME_HEADER}
The name of the experimental condition</value>
  </data>
  <data name="ControlConditions" xml:space="preserve">
    <value>The indices of the control condition(s), these should correspond to the "type" column of your observation file.</value>
  </data>
  <data name="Copyright" xml:space="preserve">
    <value>{productname} version {version}.
Martin Rusilowicz.

Additional icons made by Freepik, Google, Appzgear, Vectorgraphit, Icomoon from www.flaticon.com are licensed by CC BY 3.0.

Download the latest version and source code: https://bitbucket.org/mjr129/metabolitelevels</value>
  </data>
  <data name="DKMeansPlusPlus" xml:space="preserve">
    <value>This process starts with a "seed" variable to act as an exemplar. The distance of all other variables to this variable is then calculated. The most distant variable is then used as a second exemplar. The variable most distant from their closest exemplar acts as a third exemplar and so forth. The process is repeated until all variables fall within a certain distance range of the exemplars, or optionally until a certain number of exemplars are generated. These exemplars then act as the centres in a standard k-means clustering.</value>
  </data>
  <data name="ExperimentalConditions" xml:space="preserve">
    <value>The indices of the experimental condition(s), these should correspond to the "type" column of your observation file.</value>
  </data>
  <data name="Identifications" xml:space="preserve">
    <value>FILEFORMAT

Use to specify peak-compound annotations manually.

OPTIONAL: This information is not required.

NOTE: Purely textual or numeric annotations can be added to the peaks by including this information as extra columns in the peak-info file. See the "𝚂𝚎𝚕𝚎𝚌𝚝 𝙳𝚊𝚝𝚊" page for more details.

NOTEL Automatic identifications can be performed by selecting the "𝙿𝚎𝚛𝚏𝚘𝚛𝚖 𝚖/𝚣 𝚋𝚊𝚜𝚎𝚍 𝚊𝚞𝚝𝚘𝚖𝚊𝚝𝚒𝚌 𝚒𝚍𝚎𝚗𝚝𝚒𝚏𝚒𝚌𝚊𝚝𝚒𝚘𝚗" option.

EXPECTS: CSVFILE

{}
Text. Row names. (Ignored. Mandatory.)

{IDFILE_PEAK_HEADER}   
Text. The name of the peak. Optional. Must specify m/z and r.t. if not set.

{VARFILE_MZ_HEADER}   
Text. The m/z of the peak to be identified. Optional. Must specify peak name if not set.
	
{VARFILE_RT_HEADER}   
Text. The m/z of the peak to be identified. Optional. Must specify peak name if not set.

{ID_COMPOUNDS_HEADER}
List of text values. Comma delmited list of compounds. These should correspond to the "id" or "name" of loaded compounds.

NOTE: CSV files use commas as their internal delimiter, enclose this list in quotes to avoid confusion. 

{VARFILE_STATUS_HEADER}   
Enumeration. The status of the annotation. This can be one of "confirmed", "affirmed" or "tentative". If this column is not present the default specified by the user when loading the file is used.

{META}
All other columns are discarded.</value>
  </data>
  <data name="Intensities" xml:space="preserve">
    <value>FILEFORMAT

Specify the intentisities for each peak (row) and observation (column).

MANDATORY: An intensity matrix must be provided.

EXPECTS: CSVFILE

{}
Text. Observation names. Must be unique. Mandatory

{=Text. Peak names. Must be unique. Mandatory.}
One row per observation.
One column per peak.</value>
  </data>
  <data name="LcMsMode" xml:space="preserve">
    <value>Specifies the LC-MS mode.

This is used to determine which adducts are available during compound identification.

If no compound identification is required then select "none". This may be the case when using NMR data or if compounds have already been identified.
If the data contains both positive and negative LC data then this should be set to "mixed", in which case the mode for each peak must be specified in the peak info file.

EXPECTS: "positive", "negative", "mixed" OR "none".</value>
  </data>
  <data name="Observations" xml:space="preserve">
    <value>FILEFORMAT
    
Specify information about the experimental observations.

MANDATORY: A file must be provided to describe the observations

EXPECTS: CSVFILE

{}
Text. The name of the observation. Must be unique. Mandatory.

{OBSFILE_TIME_HEADER}
Integer. The timestep of the obervation. Optional.

{OBSFILE_REPLICATE_HEADER}
Integer. The replicate index of the observation. Optional.

{OBSFILE_GROUP_HEADER}
Text. The experimental group of the observation. Optional.

{OBSFILE_BATCH_HEADER}
Integer. Batch. Optional.

{OBSFILE_ACQUISITION_HEADER}
Integer. Acquisition order index. Must be unique. Optional.

{META}
Any additional data the user wishes to provide, unused but will be available for viewing in the software.</value>
  </data>
  <data name="RScript" xml:space="preserve">
    <value>SCRIPTING:

Enter your R script into the window. You should follow the outline above to use the inputs to generate the necessary output.

RENAMING INPUTS:

Script input parameters can be renamed as by entering a special line starting "##" at the start of the document, such as:

    ## my.x = value.matrix

Here "value.matrix" is the ID of the parameter (as listed above) and "my.x" is the new name you wish to assign to it.

DEFAULT INPUTS:

If you don't rename any inputs they will be given the default names specified above. Some of these may be "-", indicating they are not present by default.

REMOVING INPUTS:

If you name an input "-" yourself it will be removed from the list of inputs. For instance:
    
    ## - = value.matrix

This can be used to increase performance if the input is costly to calculate and you don't make use of it.

CREATING CUSTOM PARAMETERS:

Sometimes your algorithm may require additional parameters to be set by the user. You can do this as follows:

    ## k = integer

Here "k" is your name of the input, and "integer" is the type of parameter you are asking the user for.

The available parameter types are: "integer" and "double".
You can specify as many of these as you like.</value>
  </data>
  <data name="RScriptEditor" xml:space="preserve">
    <value>Specify the code for your algorithm.

You can use "##" to give names to script parameters, for example the number of clusters "k" in k-means might be specified as:

## k = integer

The available parameter types are: integer, double

Standard inputs are also provided, for instance clustering requires a value matrix

## x = value.matrix

The available inputs for the type of algorithm you are editing are shown in the caption below the title bar.
If you don't specify an input they will be given the names shown in the title bar.

Some inputs are optional since they and are represented by a dash "-" by default, meaning unused. Give these inputs a name to use them in your code. For instance your clustering algorithm might not need the value matrix to be created, so it can choose use the distance matrix directly instead.</value>
  </data>
  <data name="SaveData" xml:space="preserve">
    <value>Data can be saved in sereral formats.
MS-NRFB is the fastest and most compact format and is recommended for speed and reliability, however this format is unfortunately unable to cope with large object graph sizes (i.e. datasets with lots of discrete objects), the MJR-SBF format provides a fallback in this case.
</value>
  </data>
  <data name="SavedSession" xml:space="preserve">
    <value>Use to restore cluster assignments.

NO-TEXT please report bug in Manual.resx::SavedSession! </value>
  </data>
  <data name="Session" xml:space="preserve">
    <value>Give your session a descriptive name to identify it.

You can always change the name later.

MANDATORY: This information is required

EXPECTS: Any text

    </value>
  </data>
  <data name="StatisticsRScriptExample" xml:space="preserve">
    <value>kmeans(v, 3)$cluster

[Unable to load session]
The selected session could not be loaded.

* The file may be missing or corrupt.
* The file may have been saved using a version of the application which isn't compatible with the current version.

Please recreate the session from the original files.</value>
  </data>
  <data name="Variables" xml:space="preserve">
    <value>FILEFORMAT

Specify information about the dependent variables in the data matrix.

NOTE: To avoid ambiguity the software refers to the dependent variables as "peaks" and their values for a particular observation as "intensities", in reality these can represent any dependent variable.

MANDATORY: Peak information must be provided.

{}
Text. The name of the variable. Must be unique. Mandatory.
    
{VARFILE_MZ_HEADER}
Numeric. m/z value for the peak. Optional.

{VARFILE_MODE_HEADER}
Numeric. LC-MS mode for the peak (-1, 1). Required when MODE = Mixed Mode LC-MS.

{META}
Any additional data the user wishes to provide, unused but will be available for viewing in the software.</value>
  </data>
  <data name="UnableToLoadSession" xml:space="preserve">
    <value>The selected session could not be loaded.

* The file may be missing or corrupt.
* The file may have been saved using a version of the application which isn't compatible with the current version.

Please recreate the session from the original files.</value>
  </data>
  <data name="DataLoadQueryHelp" xml:space="preserve">
    <value>Select the data you'd like to load into the application. Select the "help" button at the bottom to show the side-bar, describing the data you need to provide for each input.</value>
  </data>
  <data name="RecentSessions" xml:space="preserve">
    <value>If your new session has a very similar setup to a previous session you can select that as your template here. Select your old session from the drop-down list or browse for it to use it as the template. Alternatively start with a clean setup by selecting the blank template.</value>
  </data>
</root>